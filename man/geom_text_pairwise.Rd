% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-text-pairwise.R
\name{geom_text_pairwise}
\alias{geom_text_pairwise}
\title{Label pairwise comparisons}
\usage{
geom_text_pairwise(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  ...,
  parse = FALSE,
  nudge_x = 0,
  nudge_y = 0,
  default.colour = "black",
  default.color = default.colour,
  colour.target = "text",
  color.target = colour.target,
  default.alpha = 1,
  alpha.target = "all",
  add.segments = TRUE,
  segment.linewidth = 0.5,
  arrow = grid::arrow(angle = 90),
  check_overlap = FALSE,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by
\code{\link[ggplot2]{aes}}. If specified and with \code{inherit.aes = TRUE}
(the default), it is combined with the default mapping at the top level of
the plot. You only need to supply \code{mapping} if there isn't a mapping
defined for the plot.}

\item{data}{A data frame. If specified, overrides the default data frame
defined at the top level of the plot.}

\item{stat}{The statistical transformation to use on the data for this layer,
as a string.}

\item{position}{Position adjustment, either as a string, or the result of a
call to a position adjustment function.}

\item{...}{other arguments passed on to \code{\link[ggplot2]{layer}}. There
  are three types of arguments you can use here:

  \itemize{ \item Aesthetics: to set an aesthetic to a fixed value, like
  \code{colour = "red"} or \code{size = 3}. \item Other arguments to the
  layer, for example you override the default \code{stat} associated with the
  layer. \item Other arguments passed on to the stat. }}

\item{parse}{If \code{TRUE}, the labels will be parsed into expressions and
displayed as described in \code{?plotmath}.}

\item{nudge_x, nudge_y}{Horizontal and vertical adjustments to nudge the
starting position of each text label. The units for \code{nudge_x} and
\code{nudge_y} are the same as for the data units on the x-axis and y-axis.}

\item{default.colour, default.color}{A colour definition to use for elements
not targeted by the colour aesthetic.}

\item{colour.target, color.target}{A vector of character strings; \code{"all"},
\code{"text"}, \code{"segment"}, \code{"box"}, \code{"box.line"}, and
\code{"box.fill"} or \code{"none"}.}

\item{default.alpha}{numeric in [0..1] A transparency value to use for
elements not targeted by the alpha aesthetic.}

\item{alpha.target}{A vector of character strings; \code{"all"},
\code{"text"}, \code{"segment"}, \code{"box"}, \code{"box.line"}, and
\code{"box.fill"} or \code{"none"}.}

\item{add.segments}{logical Display connecting segments or arrows between
two factor levels.}

\item{segment.linewidth}{numeric Width of the segments or arrows in mm.}

\item{arrow}{specification for arrow heads, as created by
\code{\link[grid]{arrow}}}

\item{check_overlap}{If \code{TRUE}, text that overlaps previous text in the
same layer will not be plotted. \code{check_overlap} takes place at draw
time and in the order of the data, thus its action depends of the size at
which the plot is drawn.}

\item{na.rm}{If \code{FALSE} (the default), removes missing values with a
warning.  If \code{TRUE} silently removes missing values.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA} includes a legend if any aesthetics are mapped.
\code{FALSE}, the default, never includes it, and \code{TRUE} always includes it.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics, rather
than combining them. This is most useful for helper functions that define
both data and aesthetics and shouldn't inherit behaviour from the default
plot specification, e.g., \code{\link[ggplot2]{borders}}.}

\item{box.padding}{numeric By how much each end of the segments
should shortened in mm.}
}
\value{
A plot layer instance.
}
\description{
Add a plot layer with a text label and a segment connecting two levels of a
factor mapped to the \code{x} or \code{y} aesthetic. Useful for reporting tests or
highlighting pairwise comparisons.
}
\details{
Geometries \code{geom_text_pairwise()} and
  \code{geom_label_pairwise()} have an
  interface similar to that of \code{\link[ggplot2]{geom_text}} and
  \code{\link[ggplot2]{geom_label}}, but add a segment connecting pairs of
  levels from a grouping factor mapped to the \emph{x} or \emph{y} aesthetic.

  Layer functions \code{geom_text_pairwise()} and
  \code{geom_label_pairwise()} use by
  default \code{\link{position_nudge_keep}} which is backwards compatible
  with \code{\link[ggplot2]{position_nudge}}. In contrast to
  \code{\link[ggplot2]{position_nudge}}, \code{\link{position_nudge_keep}}
  and all other position functions defined in packages 'ggpp' and 'ggrepel'
  keep the original coordinates, thus allowing the plotting of connecting
  segments and arrows to the original location of the text label.

  Differently to \code{geom_text_repel()} and \code{geom_label_repel()},
  \code{geom_text_s()} and \code{geom_label_s()} do not make use of
  additional aesthetics for the segments or boxes, but instead allow the
  choice of which elements are targeted by the aesthetics and which are
  rendered in a default colour. In the grammar of graphics using the same
  aesthetic with multiple meanings is not allowed, thus, the approach used in
  our geoms attempts to enforce this.
}
\section{Under development!}{
 Theis geometry is still under development
  and its user interface subject to change.
}

\section{Plot boundaries and clipping}{
 Note that when you change the scale
  limits for \emph{x} and/or \emph{y} of a plot, text labels stay the same
  size, as determined by the \code{size} aesthetic, given in millimetres. The
  actual size as seen in the plotted output is decided during the rendering
  of the plot to a graphics device. Limits are expanded only to include the
  anchor point of the labels because the "width" and "height" of a text
  element are 0 (as seen by ggplot2). Text labels do have height and width,
  but in grid units, not data units.
}

\section{Alignment}{
 You can modify text alignment with the \code{vjust} and
  \code{hjust} aesthetics. These can either be a number between 0
  (right/bottom) and 1 (top/left) or a character (\code{"left"},
  \code{"middle"}, \code{"right"}, \code{"bottom"}, \code{"center"},
  \code{"top"}). In addition, you can use special alignments for
  justification including \code{"position"}, \code{"inward"} and
  \code{"outward"}. Inward always aligns text towards the center of the
  plotting area, and outward aligns it away from the center of the plotting
  area. If tagged with \code{_mean} or \code{_median} (e.g.,
  \code{"outward_mean"}) the mean or median of the data in the panel along
  the corresponding axis is used as center. If the characters following the
  underscore represent a number (e.g., \code{"outward_10.5"}) the reference
  point will be this value in data units. Position justification is computed
  based on the direction of the displacement of the position of the label so
  that each individual text or label is justified outwards from its original
  position. The default justification is \code{"position"}.

  If no position displacement is applied, or a position function defined in
  'ggplot2' is used, these geometries behave similarly to the corresponding
  ones from package 'ggplot2' with a default justification of \code{0.5} and
  no segment drawn.
}

\section{Aesthetics}{
 Layer functions \code{geom_text_pairwise()} and
  \code{geom_label_pairwise()} require aesthetics \code{xmin}, \code{xmax},
  \code{x}, \code{y} and
  \code{label} and support aesthetics: \code{alpha}, \code{colour},
  \code{group}, \code{size} (of text), \code{family}, \code{fontface},
  \code{linewidth}, \code{linetype}, \code{hjust} and \code{vjust}. In addition,
  \code{geom_text_pairwise} supports \code{angle} and \code{geom_label_pairwise} supports
  \code{fill}. See
  \code{\link[ggplot2]{aes_colour_fill_alpha}},
  \code{\link[ggplot2]{aes_linetype_size_shape}},
  \code{\link[ggplot2]{aes_position}}, and
  \code{\link[ggplot2]{aes_group_order}}.
}

\examples{

my.cars <- mtcars[c(TRUE, FALSE, FALSE, FALSE), ]
my.cars$name <- rownames(my.cars)
p <- ggplot(my.cars, aes(factor(cyl), mpg)) +
       geom_boxplot()

my.pairs <-
  data.frame(A = 1, B = 2, bar.height = 12, p.value = 0.01)
p +
  geom_text_pairwise(data = my.pairs,
                     aes(xmin = A, xmax = B, x = (A + B) / 2,
                         y = bar.height,
                         label = p.value),
                     parse = TRUE)

p +
  geom_text_pairwise(data = my.pairs,
                     aes(xmin = A, xmax = B, x = (A + B) / 2,
                         y = bar.height,
                         label = sprintf("italic(P)~`=`~\%.2f", p.value)),
                     arrow = grid::arrow(angle = 90,
                                         length = unit(1, "mm"),
                                         ends = "both"),
                     parse = TRUE)

p +
  geom_text_pairwise(data = my.pairs,
                     aes(xmin = A, xmax = B, x = (A + B) / 2,
                         y = bar.height,
                         label = sprintf("italic(P)~`=`~\%.2f", p.value)),
                     colour = "red", colour.target = "segment",
                     arrow = grid::arrow(angle = 90,
                                         length = unit(1, "mm"),
                                         ends = "both"),
                     parse = TRUE)

p +
  geom_text_pairwise(data = my.pairs,
                     aes(xmin = A, xmax = B, x = (A + B) / 2,
                         y = bar.height,
                         label = sprintf("italic(P)~`=`~\%.2f", p.value)),
                     colour = "red", colour.target = "text",
                     arrow = grid::arrow(angle = 90,
                                         length = unit(1, "mm"),
                                         ends = "both"),
                     parse = TRUE)

}
\seealso{
\code{\link[ggplot2]{geom_text}}, \code{\link[ggplot2]{geom_label}}
  and other documentation of package 'ggplot2'.
}
